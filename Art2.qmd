```{r}
library(dplyr)
library(purrr)
library(tidyr)
library(tibble)
library(ggplot2)
library(ambient)
library(tictoc)
library(ggthemes)
library(gifski)
```

```{r}
# Function to calculate edge length
edge_length <- function(x1, y1, x2, y2) {
  sqrt((x1 - x2)^2 + (y1 - y2)^2)
}

# Function to grow a polygon with noise
grow_polygon_l <- function(polygon, iterations, noise, seed = NULL) {
  if(!is.null(seed)) set.seed(seed)
  for(i in 1:iterations) polygon <- insert_edge_l(polygon, noise)
  return(polygon)
}

# Function to insert an edge in the polygon
insert_edge_l <- function(polygon, noise) {
  ind <- sample_edge_l(polygon)
  len <- polygon[[ind]]$seg_len
  
  last_x <- polygon[[ind]]$x
  last_y <- polygon[[ind]]$y
  
  next_x <- polygon[[ind + 1]]$x
  next_y <- polygon[[ind + 1]]$y
  
  new_x <- (last_x + next_x) / 2 + edge_noise(len * noise)
  new_y <- (last_y + next_y) / 2 + edge_noise(len * noise)
  
  new_point <- list(
    x = new_x,
    y = new_y,
    seg_len = edge_length(new_x, new_y, next_x, next_y)
  )
  
  polygon[[ind]]$seg_len <- edge_length(
    last_x, last_y, new_x, new_y
  )
  
  c(
    polygon[1:ind],
    list(new_point),
    polygon[-(1:ind)]
  )
}

# Function to create a smudged hexagon
smudged_hexagon <- function(seed, noise1 = 0, noise2 = 2, noise3 = 0.5) {
  set.seed(seed)
  
  # Define hexagonal base shape
  theta <- (0:6) * pi / 3
  hexagon <- tibble(
    x = sin(theta),
    y = cos(theta),
    seg_len = edge_length(sin(theta), cos(theta), lead(sin(theta)), lead(cos(theta)))
  )
  hexagon$seg_len[7] <- 0
  hexagon <- transpose(hexagon)
  
  base <- hexagon |> 
    grow_polygon_l(iterations = 60, noise = noise1)
  
  # Define intermediate-base-shapes in clusters
  polygons <- list()
  ijk <- 0
  for(i in 1:3) {
    base_i <- base |> 
      grow_polygon_l(iterations = 50, noise = noise2)
    
    for(j in 1:3) {
      base_j <- base_i |> 
        grow_polygon_l(iterations = 50, noise = noise2)
      
      # Grow 10 polygons per intermediate-base
      for(k in 1:10) {
        ijk <- ijk + 1
        polygons[[ijk]] <- base_j |>
          grow_polygon_l(iterations = 500, noise = noise3) |>
          transpose() |>
          as_tibble() |>
          mutate(across(everything(), unlist))
      }
    }
  }
  
  # Return as data frame
  bind_rows(polygons, .id = "id")
}

# Function to sample an edge from the polygon
sample_edge_l <- function(polygon) {
  sample(length(polygon), 1, prob = map_dbl(polygon, ~ .x$seg_len))
}

# Function to generate noise for the edge
edge_noise <- function(size) {
  runif(1, min = -size/2, max = size/2)
}

show_multipolygon <- function(polygon, fill, alpha = .02, ...) {
  ggplot(polygon, aes(x, y, group = id)) +
    geom_polygon(colour = NA, alpha = alpha, fill = fill, ...) + 
    coord_equal() + 
    theme_void()
}
```

```{r}
tic()
dat <- smudged_hexagon(seed = 1)
toc()
```

```{r}
dat |> 
  show_multipolygon(fill = "#d4379005")
```

```{r}
dat <- bind_rows(
  smudged_hexagon(seed = 11),
  smudged_hexagon(seed = 44),
  smudged_hexagon(seed = 88),
  .id = "source"
) |>
  mutate(
    id = paste(id, source),
    x = x + as.numeric(source)
  ) |>
  arrange(id)

ggplot(dat, aes(x, y, group = id, fill = factor(source))) +
  geom_polygon(alpha = .02, show.legend = FALSE) + 
  theme_void() + 
  scale_fill_manual(values = c(
    "#ff1b8d", "#ffda00", "#1bb3ff"
  )) +
  coord_equal() 
```
